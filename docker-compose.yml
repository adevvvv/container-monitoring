version: '3.9'

services:
  db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pingdb
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    networks:
      - my_network

  rabbitmq:
    image: "rabbitmq:4-management"
    ports:
      - "15672:15672"
      - "5672:5672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      retries: 5
      start_period: 5s
    networks:
      - my_network

  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    environment:
      POSTGRES_CONN: "host=db port=5432 user=postgres password=postgres dbname=pingdb sslmode=disable"
      PORT: 8080
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672/"
    depends_on:
      - db
      - rabbitmq
    ports:
      - "8080:8080"
    networks:
      - my_network
      
  pinger:
    build:
      context: .
      dockerfile: ./pinger/Dockerfile
    environment:
      BACKEND_URL: "http://backend:8080/api/v1/status"
      PING_INTERVAL: "30s"
    depends_on:
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - my_network

volumes:
  db_data:

networks:
  my_network:
    driver: bridge
